version: 1.0.{build}

# Environment configuration
environment:
  matrix:
    - platform: x64
    - platform: x86
  APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
  WDK_SETUP_URL: "https://go.microsoft.com/fwlink/?linkid=2128854"

# Install dependencies
install:
  - powershell: |
      Write-Output 'Downloading and installing the latest WDK from Microsoft...'
      try {
          Invoke-WebRequest -Uri $env:WDK_SETUP_URL -OutFile wdksetup.exe -ErrorAction Stop
          Start-Process -FilePath .\wdksetup.exe -ArgumentList '/quiet' -Wait
          Write-Output 'WDK installation complete.'
      }
      catch {
          Write-Error "Failed to download or install WDK: $_"
          exit 1
      }
  
  - powershell: |
      Write-Output 'Verifying WDK installation...'
      if (-Not (Test-Path 'C:\Program Files (x86)\Windows Kits\10')) {
          Write-Error 'WDK installation failed - Windows Kits directory not found!'
          exit 1
      }
      Write-Output 'WDK verified successfully.'

# Build configuration
build_script:
  - powershell: |
      # First verify the solution file exists
      $solutionPath = "driver\DriverProject.sln"
      if (-Not (Test-Path $solutionPath)) {
          Write-Error "Solution file not found at: $solutionPath"
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Directory contents:"
          Get-ChildItem -Recurse | Select-Object FullName
          exit 1
      }

      # Create and set specific output directory
      $outputDir = ".\build\$env:platform\Release"
      New-Item -ItemType Directory -Force -Path $outputDir
      
      Write-Output "Starting build for $env:platform..."
      Write-Output "Output directory: $outputDir"
      
      try {
          # More verbose MSBuild command with specific output path
          $buildArgs = @(
              $solutionPath,
              "/p:Configuration=Release",
              "/p:Platform=$env:platform",
              "/p:OutDir=$outputDir",
              "/verbosity:detailed"
          )
          
          & msbuild $buildArgs
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Build failed with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          
          # Verify build outputs
          Write-Output "`nChecking build outputs:"
          if (Test-Path $outputDir) {
              Write-Output "Contents of build directory ($outputDir):"
              Get-ChildItem -Path $outputDir -Recurse | Select-Object FullName
          } else {
              Write-Error "Output directory not found: $outputDir"
              exit 1
          }
          
          # Verify specific driver files
          $expectedFiles = @("*.sys", "*.inf", "*.cat")
          foreach ($pattern in $expectedFiles) {
              $files = Get-ChildItem -Path $outputDir -Filter $pattern -Recurse
              if ($files) {
                  Write-Output "Found $($files.Count) $pattern files"
              } else {
                  Write-Warning "No $pattern files found in output directory"
              }
          }
      }
      catch {
          Write-Error "Build failed with error: $_"
          exit 1
      }

# After build - collect artifacts
artifacts:
  - path: build\$(platform)\Release
    name: DriverFiles_$(platform)
